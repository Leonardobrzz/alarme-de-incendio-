
fire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800277c  0800277c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800277c  0800277c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800277c  0800277c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002790  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002790  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000824d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000157d  00000000  00000000  00028281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eef0  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008925  00000000  00000000  000392e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059d99  00000000  00000000  00041c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009b9a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014c4  00000000  00000000  0009b9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800272c 	.word	0x0800272c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800272c 	.word	0x0800272c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9f9 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83b 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8c1 	bl	80003b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000232:	f000 f88f 	bl	8000354 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8000236:	23fa      	movs	r3, #250	; 0xfa
 8000238:	005b      	lsls	r3, r3, #1
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fa52 	bl	80006e4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0 || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2102      	movs	r1, #2
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fd3c 	bl	8000cc4 <HAL_GPIO_ReadPin>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d007      	beq.n	8000260 <main+0x40>
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2104      	movs	r1, #4
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fd34 	bl	8000cc4 <HAL_GPIO_ReadPin>
 800025c:	1e03      	subs	r3, r0, #0
 800025e:	d109      	bne.n	8000274 <main+0x54>
		 //ALERTA! POSSIBILIDADE DE INCÊNDIO (CHAMA IDENTIFICADA)
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fd48 	bl	8000cfe <HAL_GPIO_WritePin>
		 fire = 1;
 800026e:	2301      	movs	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	e008      	b.n	8000286 <main+0x66>
	  }else{
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2201      	movs	r2, #1
 800027a:	2101      	movs	r1, #1
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fd3e 	bl	8000cfe <HAL_GPIO_WritePin>
		 fire = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
	  }
	  HAL_Delay(500);
 8000286:	23fa      	movs	r3, #250	; 0xfa
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fa2a 	bl	80006e4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, &fire, 1, 100);
 8000290:	1d39      	adds	r1, r7, #4
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <main+0x80>)
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	2201      	movs	r2, #1
 8000298:	f001 faf2 	bl	8001880 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800029c:	e7cb      	b.n	8000236 <main+0x16>
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000028 	.word	0x20000028

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b097      	sub	sp, #92	; 0x5c
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2428      	movs	r4, #40	; 0x28
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2330      	movs	r3, #48	; 0x30
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fa31 	bl	800271c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	2318      	movs	r3, #24
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	0018      	movs	r0, r3
 80002c0:	2310      	movs	r3, #16
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 fa29 	bl	800271c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	0018      	movs	r0, r3
 80002ce:	2314      	movs	r3, #20
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 fa22 	bl	800271c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2201      	movs	r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2210      	movs	r2, #16
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fd1f 	bl	8000d38 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fe:	f000 f8a1 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	2118      	movs	r1, #24
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2207      	movs	r2, #7
 8000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2100      	movs	r1, #0
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f827 	bl	8001374 <HAL_RCC_ClockConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800032a:	f000 f88b 	bl	8000444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2201      	movs	r2, #1
 8000332:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	f001 f96d 	bl	800161c <HAL_RCCEx_PeriphCLKConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000346:	f000 f87d 	bl	8000444 <Error_Handler>
  }
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b017      	add	sp, #92	; 0x5c
 8000350:	bd90      	pop	{r4, r7, pc}
	...

08000354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_USART1_UART_Init+0x58>)
 800035a:	4a15      	ldr	r2, [pc, #84]	; (80003b0 <MX_USART1_UART_Init+0x5c>)
 800035c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000360:	2296      	movs	r2, #150	; 0x96
 8000362:	0212      	lsls	r2, r2, #8
 8000364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_USART1_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_USART1_UART_Init+0x58>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_USART1_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <MX_USART1_UART_Init+0x58>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 fa1d 	bl	80017d8 <HAL_UART_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003a2:	f000 f84f 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000028 	.word	0x20000028
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2314      	movs	r3, #20
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f002 f9aa 	bl	800271c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_GPIO_Init+0x8c>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_GPIO_Init+0x8c>)
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0289      	lsls	r1, r1, #10
 80003d2:	430a      	orrs	r2, r1
 80003d4:	615a      	str	r2, [r3, #20]
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_GPIO_Init+0x8c>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	029b      	lsls	r3, r3, #10
 80003de:	4013      	ands	r3, r2
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fc86 	bl	8000cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2201      	movs	r2, #1
 80003f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2201      	movs	r2, #1
 80003fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fae6 	bl	80009e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2206      	movs	r2, #6
 800041c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2202      	movs	r2, #2
 8000428:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	0011      	movs	r1, r2
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fad6 	bl	80009e4 <HAL_GPIO_Init>

}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b006      	add	sp, #24
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x44>)
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <HAL_MspInit+0x44>)
 800045c:	2101      	movs	r1, #1
 800045e:	430a      	orrs	r2, r1
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	2201      	movs	r2, #1
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_MspInit+0x44>)
 8000470:	69da      	ldr	r2, [r3, #28]
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <HAL_MspInit+0x44>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0549      	lsls	r1, r1, #21
 8000478:	430a      	orrs	r2, r1
 800047a:	61da      	str	r2, [r3, #28]
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_MspInit+0x44>)
 800047e:	69da      	ldr	r2, [r3, #28]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	055b      	lsls	r3, r3, #21
 8000484:	4013      	ands	r3, r2
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b08b      	sub	sp, #44	; 0x2c
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	2414      	movs	r4, #20
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	0018      	movs	r0, r3
 80004a6:	2314      	movs	r3, #20
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 f936 	bl	800271c <memset>
  if(huart->Instance==USART1)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a21      	ldr	r2, [pc, #132]	; (800053c <HAL_UART_MspInit+0xa4>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d13b      	bne.n	8000532 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ba:	4b21      	ldr	r3, [pc, #132]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	01c9      	lsls	r1, r1, #7
 80004c4:	430a      	orrs	r2, r1
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004ca:	699a      	ldr	r2, [r3, #24]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	01db      	lsls	r3, r3, #7
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b19      	ldr	r3, [pc, #100]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0289      	lsls	r1, r1, #10
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <HAL_UART_MspInit+0xa8>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	029b      	lsls	r3, r3, #10
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	22c0      	movs	r2, #192	; 0xc0
 80004f6:	00d2      	lsls	r2, r2, #3
 80004f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	0021      	movs	r1, r4
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2202      	movs	r2, #2
 8000500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2203      	movs	r2, #3
 800050c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	187a      	adds	r2, r7, r1
 8000516:	2390      	movs	r3, #144	; 0x90
 8000518:	05db      	lsls	r3, r3, #23
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fa61 	bl	80009e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	201b      	movs	r0, #27
 8000528:	f000 f9ac 	bl	8000884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800052c:	201b      	movs	r0, #27
 800052e:	f000 f9be 	bl	80008ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b00b      	add	sp, #44	; 0x2c
 8000538:	bd90      	pop	{r4, r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	40013800 	.word	0x40013800
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f8a0 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <USART1_IRQHandler+0x14>)
 800057a:	0018      	movs	r0, r3
 800057c:	f001 fa2a 	bl	80019d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000028 	.word	0x20000028

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000598:	4813      	ldr	r0, [pc, #76]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <LoopForever+0x6>)
    LDR R1, [R0]
 800059e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80005a0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <LoopForever+0xa>)
    CMP R1, R2
 80005a4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80005a6:	d105      	bne.n	80005b4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80005aa:	4913      	ldr	r1, [pc, #76]	; (80005f8 <LoopForever+0x12>)
    STR R1, [R0]
 80005ac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <LoopForever+0x16>)
    LDR R1,=0x00000000
 80005b0:	4913      	ldr	r1, [pc, #76]	; (8000600 <LoopForever+0x1a>)
    STR R1, [R0]
 80005b2:	6001      	str	r1, [r0, #0]

080005b4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	4813      	ldr	r0, [pc, #76]	; (8000604 <LoopForever+0x1e>)
  ldr r1, =_edata
 80005b6:	4914      	ldr	r1, [pc, #80]	; (8000608 <LoopForever+0x22>)
  ldr r2, =_sidata
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <LoopForever+0x26>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80005cc:	4c11      	ldr	r4, [pc, #68]	; (8000614 <LoopForever+0x2e>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005da:	f7ff ffd7 	bl	800058c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005de:	f002 f879 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe1d 	bl	8000220 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80005ec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80005f0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80005f4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80005f8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80005fc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000600:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800060c:	08002784 	.word	0x08002784
  ldr r2, =_sbss
 8000610:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000614:	200000b0 	.word	0x200000b0

08000618 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_IRQHandler>
	...

0800061c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_Init+0x24>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_Init+0x24>)
 8000626:	2110      	movs	r1, #16
 8000628:	430a      	orrs	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f809 	bl	8000644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000632:	f7ff ff0d 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
}
 8000638:	0018      	movs	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_InitTick+0x5c>)
 800064e:	681c      	ldr	r4, [r3, #0]
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0019      	movs	r1, r3
 8000656:	23fa      	movs	r3, #250	; 0xfa
 8000658:	0098      	lsls	r0, r3, #2
 800065a:	f7ff fd55 	bl	8000108 <__udivsi3>
 800065e:	0003      	movs	r3, r0
 8000660:	0019      	movs	r1, r3
 8000662:	0020      	movs	r0, r4
 8000664:	f7ff fd50 	bl	8000108 <__udivsi3>
 8000668:	0003      	movs	r3, r0
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f92f 	bl	80008ce <HAL_SYSTICK_Config>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e00f      	b.n	8000698 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d80b      	bhi.n	8000696 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	2301      	movs	r3, #1
 8000682:	425b      	negs	r3, r3
 8000684:	2200      	movs	r2, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f000 f8fc 	bl	8000884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_InitTick+0x64>)
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b003      	add	sp, #12
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_IncTick+0x1c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	001a      	movs	r2, r3
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x20>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	18d2      	adds	r2, r2, r3
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_IncTick+0x20>)
 80006be:	601a      	str	r2, [r3, #0]
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	20000008 	.word	0x20000008
 80006cc:	200000ac 	.word	0x200000ac

080006d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <HAL_GetTick+0x10>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	200000ac 	.word	0x200000ac

080006e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ec:	f7ff fff0 	bl	80006d0 <HAL_GetTick>
 80006f0:	0003      	movs	r3, r0
 80006f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3301      	adds	r3, #1
 80006fc:	d005      	beq.n	800070a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_Delay+0x44>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	001a      	movs	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	189b      	adds	r3, r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	f7ff ffe0 	bl	80006d0 <HAL_GetTick>
 8000710:	0002      	movs	r2, r0
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	429a      	cmp	r2, r3
 800071a:	d8f7      	bhi.n	800070c <HAL_Delay+0x28>
  {
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b004      	add	sp, #16
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000008 	.word	0x20000008

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	0002      	movs	r2, r0
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b7f      	cmp	r3, #127	; 0x7f
 800073e:	d809      	bhi.n	8000754 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	001a      	movs	r2, r3
 8000746:	231f      	movs	r3, #31
 8000748:	401a      	ands	r2, r3
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_EnableIRQ+0x30>)
 800074c:	2101      	movs	r1, #1
 800074e:	4091      	lsls	r1, r2
 8000750:	000a      	movs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
  }
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b7f      	cmp	r3, #127	; 0x7f
 8000774:	d828      	bhi.n	80007c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000776:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <__NVIC_SetPriority+0xd4>)
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25b      	sxtb	r3, r3
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	33c0      	adds	r3, #192	; 0xc0
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	589b      	ldr	r3, [r3, r2]
 8000786:	1dfa      	adds	r2, r7, #7
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	0011      	movs	r1, r2
 800078c:	2203      	movs	r2, #3
 800078e:	400a      	ands	r2, r1
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	21ff      	movs	r1, #255	; 0xff
 8000794:	4091      	lsls	r1, r2
 8000796:	000a      	movs	r2, r1
 8000798:	43d2      	mvns	r2, r2
 800079a:	401a      	ands	r2, r3
 800079c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	22ff      	movs	r2, #255	; 0xff
 80007a4:	401a      	ands	r2, r3
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	0018      	movs	r0, r3
 80007ac:	2303      	movs	r3, #3
 80007ae:	4003      	ands	r3, r0
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <__NVIC_SetPriority+0xd4>)
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	089b      	lsrs	r3, r3, #2
 80007be:	430a      	orrs	r2, r1
 80007c0:	33c0      	adds	r3, #192	; 0xc0
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007c6:	e031      	b.n	800082c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <__NVIC_SetPriority+0xd8>)
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0019      	movs	r1, r3
 80007d0:	230f      	movs	r3, #15
 80007d2:	400b      	ands	r3, r1
 80007d4:	3b08      	subs	r3, #8
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	3306      	adds	r3, #6
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	18d3      	adds	r3, r2, r3
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1dfa      	adds	r2, r7, #7
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	0011      	movs	r1, r2
 80007e8:	2203      	movs	r2, #3
 80007ea:	400a      	ands	r2, r1
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	21ff      	movs	r1, #255	; 0xff
 80007f0:	4091      	lsls	r1, r2
 80007f2:	000a      	movs	r2, r1
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	401a      	ands	r2, r3
 80007f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	019b      	lsls	r3, r3, #6
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	401a      	ands	r2, r3
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	0018      	movs	r0, r3
 8000808:	2303      	movs	r3, #3
 800080a:	4003      	ands	r3, r0
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <__NVIC_SetPriority+0xd8>)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	001c      	movs	r4, r3
 8000818:	230f      	movs	r3, #15
 800081a:	4023      	ands	r3, r4
 800081c:	3b08      	subs	r3, #8
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	430a      	orrs	r2, r1
 8000822:	3306      	adds	r3, #6
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	18c3      	adds	r3, r0, r3
 8000828:	3304      	adds	r3, #4
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b003      	add	sp, #12
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	045b      	lsls	r3, r3, #17
 800084c:	429a      	cmp	r2, r3
 800084e:	d301      	bcc.n	8000854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000850:	2301      	movs	r3, #1
 8000852:	e010      	b.n	8000876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <SysTick_Config+0x44>)
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	3a01      	subs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085c:	2301      	movs	r3, #1
 800085e:	425b      	negs	r3, r3
 8000860:	2103      	movs	r1, #3
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff ff7c 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x44>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x44>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	210f      	movs	r1, #15
 8000890:	187b      	adds	r3, r7, r1
 8000892:	1c02      	adds	r2, r0, #0
 8000894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	187b      	adds	r3, r7, r1
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff ff5d 	bl	8000760 <__NVIC_SetPriority>
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b004      	add	sp, #16
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	0002      	movs	r2, r0
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ff33 	bl	800072c <__NVIC_EnableIRQ>
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ffaf 	bl	800083c <SysTick_Config>
 80008de:	0003      	movs	r3, r0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2221      	movs	r2, #33	; 0x21
 80008f4:	5c9b      	ldrb	r3, [r3, r2]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d008      	beq.n	800090e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2204      	movs	r2, #4
 8000900:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e020      	b.n	8000950 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	210e      	movs	r1, #14
 800091a:	438a      	bics	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	438a      	bics	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000936:	2101      	movs	r1, #1
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2221      	movs	r2, #33	; 0x21
 8000942:	2101      	movs	r1, #1
 8000944:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000960:	210f      	movs	r1, #15
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2221      	movs	r2, #33	; 0x21
 800096c:	5c9b      	ldrb	r3, [r3, r2]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d006      	beq.n	8000982 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2204      	movs	r2, #4
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e028      	b.n	80009d4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	210e      	movs	r1, #14
 800098e:	438a      	bics	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	438a      	bics	r2, r1
 80009a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009aa:	2101      	movs	r1, #1
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2221      	movs	r2, #33	; 0x21
 80009b6:	2101      	movs	r1, #1
 80009b8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	0010      	movs	r0, r2
 80009d2:	4798      	blx	r3
    } 
  }
  return status;
 80009d4:	230f      	movs	r3, #15
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	781b      	ldrb	r3, [r3, #0]
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e14f      	b.n	8000c94 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d100      	bne.n	8000a0c <HAL_GPIO_Init+0x28>
 8000a0a:	e140      	b.n	8000c8e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2203      	movs	r2, #3
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d005      	beq.n	8000a24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d130      	bne.n	8000a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	43da      	mvns	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	409a      	lsls	r2, r3
 8000a46:	0013      	movs	r3, r2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	2201      	movs	r2, #1
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d017      	beq.n	8000ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	58d3      	ldr	r3, [r2, r3]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2207      	movs	r2, #7
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2107      	movs	r1, #7
 8000afa:	400b      	ands	r3, r1
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	43da      	mvns	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2203      	movs	r2, #3
 8000b34:	401a      	ands	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	029b      	lsls	r3, r3, #10
 8000b52:	4013      	ands	r3, r2
 8000b54:	d100      	bne.n	8000b58 <HAL_GPIO_Init+0x174>
 8000b56:	e09a      	b.n	8000c8e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	4b54      	ldr	r3, [pc, #336]	; (8000cac <HAL_GPIO_Init+0x2c8>)
 8000b5a:	699a      	ldr	r2, [r3, #24]
 8000b5c:	4b53      	ldr	r3, [pc, #332]	; (8000cac <HAL_GPIO_Init+0x2c8>)
 8000b5e:	2101      	movs	r1, #1
 8000b60:	430a      	orrs	r2, r1
 8000b62:	619a      	str	r2, [r3, #24]
 8000b64:	4b51      	ldr	r3, [pc, #324]	; (8000cac <HAL_GPIO_Init+0x2c8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b70:	4a4f      	ldr	r2, [pc, #316]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	589b      	ldr	r3, [r3, r2]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4013      	ands	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	43da      	mvns	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	2390      	movs	r3, #144	; 0x90
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0x1e2>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a44      	ldr	r2, [pc, #272]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d00d      	beq.n	8000bc2 <HAL_GPIO_Init+0x1de>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a43      	ldr	r2, [pc, #268]	; (8000cb8 <HAL_GPIO_Init+0x2d4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d007      	beq.n	8000bbe <HAL_GPIO_Init+0x1da>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a42      	ldr	r2, [pc, #264]	; (8000cbc <HAL_GPIO_Init+0x2d8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_GPIO_Init+0x1d6>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bba:	2305      	movs	r3, #5
 8000bbc:	e004      	b.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e002      	b.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	2103      	movs	r1, #3
 8000bcc:	400a      	ands	r2, r1
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	4093      	lsls	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd8:	4935      	ldr	r1, [pc, #212]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be6:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	025b      	lsls	r3, r3, #9
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	029b      	lsls	r3, r3, #10
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43da      	mvns	r2, r3
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	035b      	lsls	r3, r3, #13
 8000c52:	4013      	ands	r3, r2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	039b      	lsls	r3, r3, #14
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_GPIO_Init+0x2dc>)
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	40da      	lsrs	r2, r3
 8000c9c:	1e13      	subs	r3, r2, #0
 8000c9e:	d000      	beq.n	8000ca2 <HAL_GPIO_Init+0x2be>
 8000ca0:	e6a8      	b.n	80009f4 <HAL_GPIO_Init+0x10>
  } 
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b006      	add	sp, #24
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	000a      	movs	r2, r1
 8000cce:	1cbb      	adds	r3, r7, #2
 8000cd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	1cba      	adds	r2, r7, #2
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d004      	beq.n	8000ce8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000cde:	230f      	movs	r3, #15
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e003      	b.n	8000cf0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
  }
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	0008      	movs	r0, r1
 8000d08:	0011      	movs	r1, r2
 8000d0a:	1cbb      	adds	r3, r7, #2
 8000d0c:	1c02      	adds	r2, r0, #0
 8000d0e:	801a      	strh	r2, [r3, #0]
 8000d10:	1c7b      	adds	r3, r7, #1
 8000d12:	1c0a      	adds	r2, r1, #0
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d16:	1c7b      	adds	r3, r7, #1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	881a      	ldrh	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d26:	e003      	b.n	8000d30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e305      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	d100      	bne.n	8000d56 <HAL_RCC_OscConfig+0x1e>
 8000d54:	e08d      	b.n	8000e72 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d56:	4bc5      	ldr	r3, [pc, #788]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d00e      	beq.n	8000d80 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d62:	4bc2      	ldr	r3, [pc, #776]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	220c      	movs	r2, #12
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d116      	bne.n	8000d9c <HAL_RCC_OscConfig+0x64>
 8000d6e:	4bbf      	ldr	r3, [pc, #764]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	23c0      	movs	r3, #192	; 0xc0
 8000d74:	025b      	lsls	r3, r3, #9
 8000d76:	401a      	ands	r2, r3
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d10d      	bne.n	8000d9c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	4bba      	ldr	r3, [pc, #744]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d100      	bne.n	8000d8e <HAL_RCC_OscConfig+0x56>
 8000d8c:	e070      	b.n	8000e70 <HAL_RCC_OscConfig+0x138>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d000      	beq.n	8000d98 <HAL_RCC_OscConfig+0x60>
 8000d96:	e06b      	b.n	8000e70 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e2dc      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d107      	bne.n	8000db4 <HAL_RCC_OscConfig+0x7c>
 8000da4:	4bb1      	ldr	r3, [pc, #708]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4bb0      	ldr	r3, [pc, #704]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	0249      	lsls	r1, r1, #9
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e02f      	b.n	8000e14 <HAL_RCC_OscConfig+0xdc>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x9e>
 8000dbc:	4bab      	ldr	r3, [pc, #684]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4baa      	ldr	r3, [pc, #680]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dc2:	49ab      	ldr	r1, [pc, #684]	; (8001070 <HAL_RCC_OscConfig+0x338>)
 8000dc4:	400a      	ands	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	4ba8      	ldr	r3, [pc, #672]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4ba7      	ldr	r3, [pc, #668]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dce:	49a9      	ldr	r1, [pc, #676]	; (8001074 <HAL_RCC_OscConfig+0x33c>)
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e01e      	b.n	8000e14 <HAL_RCC_OscConfig+0xdc>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d10e      	bne.n	8000dfc <HAL_RCC_OscConfig+0xc4>
 8000dde:	4ba3      	ldr	r3, [pc, #652]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4ba2      	ldr	r3, [pc, #648]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	02c9      	lsls	r1, r1, #11
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4b9f      	ldr	r3, [pc, #636]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b9e      	ldr	r3, [pc, #632]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	0249      	lsls	r1, r1, #9
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e00b      	b.n	8000e14 <HAL_RCC_OscConfig+0xdc>
 8000dfc:	4b9b      	ldr	r3, [pc, #620]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b9a      	ldr	r3, [pc, #616]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e02:	499b      	ldr	r1, [pc, #620]	; (8001070 <HAL_RCC_OscConfig+0x338>)
 8000e04:	400a      	ands	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	4b98      	ldr	r3, [pc, #608]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b97      	ldr	r3, [pc, #604]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e0e:	4999      	ldr	r1, [pc, #612]	; (8001074 <HAL_RCC_OscConfig+0x33c>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d014      	beq.n	8000e46 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc58 	bl	80006d0 <HAL_GetTick>
 8000e20:	0003      	movs	r3, r0
 8000e22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	e008      	b.n	8000e38 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e26:	f7ff fc53 	bl	80006d0 <HAL_GetTick>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b64      	cmp	r3, #100	; 0x64
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e28e      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e38:	4b8c      	ldr	r3, [pc, #560]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	029b      	lsls	r3, r3, #10
 8000e40:	4013      	ands	r3, r2
 8000e42:	d0f0      	beq.n	8000e26 <HAL_RCC_OscConfig+0xee>
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc43 	bl	80006d0 <HAL_GetTick>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fc3e 	bl	80006d0 <HAL_GetTick>
 8000e54:	0002      	movs	r2, r0
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e279      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	4b82      	ldr	r3, [pc, #520]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	029b      	lsls	r3, r3, #10
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x118>
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x146>
 8000e7c:	e06c      	b.n	8000f58 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	220c      	movs	r2, #12
 8000e84:	4013      	ands	r3, r2
 8000e86:	d00e      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e88:	4b78      	ldr	r3, [pc, #480]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d11f      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000e94:	4b75      	ldr	r3, [pc, #468]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	23c0      	movs	r3, #192	; 0xc0
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d116      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	4b71      	ldr	r3, [pc, #452]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4013      	ands	r3, r2
 8000eae:	d005      	beq.n	8000ebc <HAL_RCC_OscConfig+0x184>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d001      	beq.n	8000ebc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e24c      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebc:	4b6b      	ldr	r3, [pc, #428]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	22f8      	movs	r2, #248	; 0xf8
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	00da      	lsls	r2, r3, #3
 8000ecc:	4b67      	ldr	r3, [pc, #412]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	e041      	b.n	8000f58 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d024      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000edc:	4b63      	ldr	r3, [pc, #396]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b62      	ldr	r3, [pc, #392]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fbf2 	bl	80006d0 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fbed 	bl	80006d0 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e228      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b59      	ldr	r3, [pc, #356]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d0f1      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	22f8      	movs	r2, #248	; 0xf8
 8000f14:	4393      	bics	r3, r2
 8000f16:	0019      	movs	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	00da      	lsls	r2, r3, #3
 8000f1e:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e018      	b.n	8000f58 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b51      	ldr	r3, [pc, #324]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b50      	ldr	r3, [pc, #320]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	438a      	bics	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fbcd 	bl	80006d0 <HAL_GetTick>
 8000f36:	0003      	movs	r3, r0
 8000f38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fbc8 	bl	80006d0 <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e203      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2202      	movs	r2, #2
 8000f54:	4013      	ands	r3, r2
 8000f56:	d1f1      	bne.n	8000f3c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d036      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d019      	beq.n	8000f9e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6a:	4b40      	ldr	r3, [pc, #256]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f76:	f7ff fbab 	bl	80006d0 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fba6 	bl	80006d0 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e1e1      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f1      	beq.n	8000f80 <HAL_RCC_OscConfig+0x248>
 8000f9c:	e018      	b.n	8000fd0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b33      	ldr	r3, [pc, #204]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	438a      	bics	r2, r1
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb91 	bl	80006d0 <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fb8c 	bl	80006d0 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1c7      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d1f1      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d100      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2a4>
 8000fda:	e0b5      	b.n	8001148 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fdc:	201f      	movs	r0, #31
 8000fde:	183b      	adds	r3, r7, r0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	4013      	ands	r3, r2
 8000fee:	d110      	bne.n	8001012 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0549      	lsls	r1, r1, #21
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	61da      	str	r2, [r3, #28]
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	055b      	lsls	r3, r3, #21
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800100c:	183b      	adds	r3, r7, r0
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_RCC_OscConfig+0x340>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4013      	ands	r3, r2
 800101c:	d11a      	bne.n	8001054 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_RCC_OscConfig+0x340>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_RCC_OscConfig+0x340>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0049      	lsls	r1, r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102c:	f7ff fb50 	bl	80006d0 <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fb4b 	bl	80006d0 <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e186      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_RCC_OscConfig+0x340>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4013      	ands	r3, r2
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10f      	bne.n	800107c <HAL_RCC_OscConfig+0x344>
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_RCC_OscConfig+0x334>)
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <HAL_RCC_OscConfig+0x334>)
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	e036      	b.n	80010d8 <HAL_RCC_OscConfig+0x3a0>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40021000 	.word	0x40021000
 8001070:	fffeffff 	.word	0xfffeffff
 8001074:	fffbffff 	.word	0xfffbffff
 8001078:	40007000 	.word	0x40007000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10c      	bne.n	800109e <HAL_RCC_OscConfig+0x366>
 8001084:	4bb6      	ldr	r3, [pc, #728]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	4bb5      	ldr	r3, [pc, #724]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800108a:	2101      	movs	r1, #1
 800108c:	438a      	bics	r2, r1
 800108e:	621a      	str	r2, [r3, #32]
 8001090:	4bb3      	ldr	r3, [pc, #716]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4bb2      	ldr	r3, [pc, #712]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001096:	2104      	movs	r1, #4
 8001098:	438a      	bics	r2, r1
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e01c      	b.n	80010d8 <HAL_RCC_OscConfig+0x3a0>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x388>
 80010a6:	4bae      	ldr	r3, [pc, #696]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010a8:	6a1a      	ldr	r2, [r3, #32]
 80010aa:	4bad      	ldr	r3, [pc, #692]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010ac:	2104      	movs	r1, #4
 80010ae:	430a      	orrs	r2, r1
 80010b0:	621a      	str	r2, [r3, #32]
 80010b2:	4bab      	ldr	r3, [pc, #684]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010b4:	6a1a      	ldr	r2, [r3, #32]
 80010b6:	4baa      	ldr	r3, [pc, #680]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	621a      	str	r2, [r3, #32]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0x3a0>
 80010c0:	4ba7      	ldr	r3, [pc, #668]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	4ba6      	ldr	r3, [pc, #664]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	438a      	bics	r2, r1
 80010ca:	621a      	str	r2, [r3, #32]
 80010cc:	4ba4      	ldr	r3, [pc, #656]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010ce:	6a1a      	ldr	r2, [r3, #32]
 80010d0:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80010d2:	2104      	movs	r1, #4
 80010d4:	438a      	bics	r2, r1
 80010d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d014      	beq.n	800110a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff faf6 	bl	80006d0 <HAL_GetTick>
 80010e4:	0003      	movs	r3, r0
 80010e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	e009      	b.n	80010fe <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff faf1 	bl	80006d0 <HAL_GetTick>
 80010ee:	0002      	movs	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4a9b      	ldr	r2, [pc, #620]	; (8001364 <HAL_RCC_OscConfig+0x62c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e12b      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fe:	4b98      	ldr	r3, [pc, #608]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x3b2>
 8001108:	e013      	b.n	8001132 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fae1 	bl	80006d0 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001112:	e009      	b.n	8001128 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001114:	f7ff fadc 	bl	80006d0 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a91      	ldr	r2, [pc, #580]	; (8001364 <HAL_RCC_OscConfig+0x62c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e116      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	2202      	movs	r2, #2
 800112e:	4013      	ands	r3, r2
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001132:	231f      	movs	r3, #31
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113c:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800113e:	69da      	ldr	r2, [r3, #28]
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001142:	4989      	ldr	r1, [pc, #548]	; (8001368 <HAL_RCC_OscConfig+0x630>)
 8001144:	400a      	ands	r2, r1
 8001146:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2210      	movs	r2, #16
 800114e:	4013      	ands	r3, r2
 8001150:	d063      	beq.n	800121a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12a      	bne.n	80011b0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800115a:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800115c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001160:	2104      	movs	r1, #4
 8001162:	430a      	orrs	r2, r1
 8001164:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001166:	4b7e      	ldr	r3, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff faad 	bl	80006d0 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800117c:	f7ff faa8 	bl	80006d0 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e0e3      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800118e:	4b74      	ldr	r3, [pc, #464]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d0f1      	beq.n	800117c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001198:	4b71      	ldr	r3, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800119a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119c:	22f8      	movs	r2, #248	; 0xf8
 800119e:	4393      	bics	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	00da      	lsls	r2, r3, #3
 80011a8:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011aa:	430a      	orrs	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
 80011ae:	e034      	b.n	800121a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	3305      	adds	r3, #5
 80011b6:	d111      	bne.n	80011dc <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011be:	2104      	movs	r1, #4
 80011c0:	438a      	bics	r2, r1
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011c4:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	22f8      	movs	r2, #248	; 0xf8
 80011ca:	4393      	bics	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4b62      	ldr	r3, [pc, #392]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
 80011da:	e01e      	b.n	800121a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011dc:	4b60      	ldr	r3, [pc, #384]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e0:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011e2:	2104      	movs	r1, #4
 80011e4:	430a      	orrs	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ec:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fa6c 	bl	80006d0 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011fe:	f7ff fa67 	bl	80006d0 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e0a2      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d1f1      	bne.n	80011fe <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d100      	bne.n	8001224 <HAL_RCC_OscConfig+0x4ec>
 8001222:	e097      	b.n	8001354 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	220c      	movs	r2, #12
 800122a:	4013      	ands	r3, r2
 800122c:	2b08      	cmp	r3, #8
 800122e:	d100      	bne.n	8001232 <HAL_RCC_OscConfig+0x4fa>
 8001230:	e06b      	b.n	800130a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d14c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123a:	4b49      	ldr	r3, [pc, #292]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001240:	494a      	ldr	r1, [pc, #296]	; (800136c <HAL_RCC_OscConfig+0x634>)
 8001242:	400a      	ands	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fa43 	bl	80006d0 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fa3e 	bl	80006d0 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e079      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	049b      	lsls	r3, r3, #18
 800126a:	4013      	ands	r3, r2
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	220f      	movs	r2, #15
 8001274:	4393      	bics	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800127e:	430a      	orrs	r2, r1
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a3a      	ldr	r2, [pc, #232]	; (8001370 <HAL_RCC_OscConfig+0x638>)
 8001288:	4013      	ands	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	431a      	orrs	r2, r3
 8001296:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0449      	lsls	r1, r1, #17
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fa11 	bl	80006d0 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fa0c 	bl	80006d0 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e047      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	049b      	lsls	r3, r3, #18
 80012ce:	4013      	ands	r3, r2
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x57c>
 80012d2:	e03f      	b.n	8001354 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80012da:	4924      	ldr	r1, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x634>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff f9f6 	bl	80006d0 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff f9f1 	bl	80006d0 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e02c      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	049b      	lsls	r3, r3, #18
 8001304:	4013      	ands	r3, r2
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x5b2>
 8001308:	e024      	b.n	8001354 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e01f      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x628>)
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	23c0      	movs	r3, #192	; 0xc0
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	401a      	ands	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	429a      	cmp	r2, r3
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	220f      	movs	r2, #15
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	23f0      	movs	r3, #240	; 0xf0
 8001344:	039b      	lsls	r3, r3, #14
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b008      	add	sp, #32
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40021000 	.word	0x40021000
 8001364:	00001388 	.word	0x00001388
 8001368:	efffffff 	.word	0xefffffff
 800136c:	feffffff 	.word	0xfeffffff
 8001370:	ffc27fff 	.word	0xffc27fff

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0b3      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d911      	bls.n	80013ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e09a      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d006      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80013d4:	21e0      	movs	r1, #224	; 0xe0
 80013d6:	00c9      	lsls	r1, r1, #3
 80013d8:	430a      	orrs	r2, r1
 80013da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	4393      	bics	r3, r2
 80013e4:	0019      	movs	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80013ec:	430a      	orrs	r2, r1
 80013ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	d040      	beq.n	800147c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d114      	bne.n	8001438 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e06e      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d108      	bne.n	8001438 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e062      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e05b      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	4393      	bics	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800144c:	f7ff f940 	bl	80006d0 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001454:	e009      	b.n	800146a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001456:	f7ff f93b 	bl	80006d0 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_RCC_ClockConfig+0x18c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e042      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	220c      	movs	r2, #12
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	429a      	cmp	r2, r3
 800147a:	d1ec      	bne.n	8001456 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d211      	bcs.n	80014ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_RCC_ClockConfig+0x184>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e020      	b.n	80014f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2204      	movs	r2, #4
 80014b4:	4013      	ands	r3, r2
 80014b6:	d009      	beq.n	80014cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_RCC_ClockConfig+0x190>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014cc:	f000 f820 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 80014d0:	0001      	movs	r1, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_RCC_ClockConfig+0x188>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	220f      	movs	r2, #15
 80014da:	4013      	ands	r3, r2
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_RCC_ClockConfig+0x194>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	000a      	movs	r2, r1
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_ClockConfig+0x198>)
 80014e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f7ff f8ab 	bl	8000644 <HAL_InitTick>
  
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40021000 	.word	0x40021000
 8001500:	00001388 	.word	0x00001388
 8001504:	fffff8ff 	.word	0xfffff8ff
 8001508:	08002764 	.word	0x08002764
 800150c:	20000000 	.word	0x20000000

08001510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b08f      	sub	sp, #60	; 0x3c
 8001514:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001516:	2314      	movs	r3, #20
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	4a2c      	ldr	r2, [pc, #176]	; (80015cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800151c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800151e:	c313      	stmia	r3!, {r0, r1, r4}
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800152a:	c313      	stmia	r3!, {r0, r1, r4}
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	220c      	movs	r2, #12
 800154e:	4013      	ands	r3, r2
 8001550:	2b04      	cmp	r3, #4
 8001552:	d002      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x4a>
 8001554:	2b08      	cmp	r3, #8
 8001556:	d003      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x50>
 8001558:	e02f      	b.n	80015ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800155e:	e02f      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	220f      	movs	r2, #15
 8001566:	4013      	ands	r3, r2
 8001568:	2214      	movs	r2, #20
 800156a:	18ba      	adds	r2, r7, r2
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	220f      	movs	r2, #15
 8001576:	4013      	ands	r3, r2
 8001578:	1d3a      	adds	r2, r7, #4
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800157e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	401a      	ands	r2, r3
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	025b      	lsls	r3, r3, #9
 800158a:	429a      	cmp	r2, r3
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800158e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001592:	f7fe fdb9 	bl	8000108 <__udivsi3>
 8001596:	0003      	movs	r3, r0
 8001598:	001a      	movs	r2, r3
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	4353      	muls	r3, r2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015a6:	f7fe fdaf 	bl	8000108 <__udivsi3>
 80015aa:	0003      	movs	r3, r0
 80015ac:	001a      	movs	r2, r3
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	4353      	muls	r3, r2
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015b8:	e002      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b00f      	add	sp, #60	; 0x3c
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	08002744 	.word	0x08002744
 80015d0:	08002754 	.word	0x08002754
 80015d4:	40021000 	.word	0x40021000
 80015d8:	007a1200 	.word	0x007a1200

080015dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_RCC_GetHCLKFreq+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000000 	.word	0x20000000

080015f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f4:	f7ff fff2 	bl	80015dc <HAL_RCC_GetHCLKFreq>
 80015f8:	0001      	movs	r1, r0
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	2207      	movs	r2, #7
 8001602:	4013      	ands	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	40d9      	lsrs	r1, r3
 800160a:	000b      	movs	r3, r1
}    
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40021000 	.word	0x40021000
 8001618:	08002774 	.word	0x08002774

0800161c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	4013      	ands	r3, r2
 8001636:	d100      	bne.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001638:	e08e      	b.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800163a:	2017      	movs	r0, #23
 800163c:	183b      	adds	r3, r7, r0
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	055b      	lsls	r3, r3, #21
 800164a:	4013      	ands	r3, r2
 800164c:	d110      	bne.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	4b5b      	ldr	r3, [pc, #364]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0549      	lsls	r1, r1, #21
 8001658:	430a      	orrs	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
 800165c:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	183b      	adds	r3, r7, r0
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d11a      	bne.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167c:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	0049      	lsls	r1, r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168a:	f7ff f821 	bl	80006d0 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	e008      	b.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff f81c 	bl	80006d0 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e087      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	23c0      	movs	r3, #192	; 0xc0
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d034      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	23c0      	movs	r3, #192	; 0xc0
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d02c      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a3b      	ldr	r2, [pc, #236]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80016da:	4013      	ands	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0249      	lsls	r1, r1, #9
 80016e8:	430a      	orrs	r2, r1
 80016ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016f2:	4936      	ldr	r1, [pc, #216]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	4013      	ands	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7fe ffe3 	bl	80006d0 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	e009      	b.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7fe ffde 	bl	80006d0 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e048      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d0f0      	beq.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800173e:	430a      	orrs	r2, r1
 8001740:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001742:	2317      	movs	r3, #23
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800174e:	69da      	ldr	r2, [r3, #28]
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001752:	4920      	ldr	r1, [pc, #128]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001754:	400a      	ands	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	d009      	beq.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	2203      	movs	r2, #3
 8001768:	4393      	bics	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001772:	430a      	orrs	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2220      	movs	r2, #32
 800177c:	4013      	ands	r3, r2
 800177e:	d009      	beq.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	2210      	movs	r2, #16
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001790:	430a      	orrs	r2, r1
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d009      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b006      	add	sp, #24
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	fffffcff 	.word	0xfffffcff
 80017cc:	fffeffff 	.word	0xfffeffff
 80017d0:	00001388 	.word	0x00001388
 80017d4:	efffffff 	.word	0xefffffff

080017d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e044      	b.n	8001874 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2274      	movs	r2, #116	; 0x74
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7fe fe4b 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2224      	movs	r2, #36	; 0x24
 8001806:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	438a      	bics	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fbb6 	bl	8001f8c <UART_SetConfig>
 8001820:	0003      	movs	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e024      	b.n	8001874 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 fce9 	bl	800220c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	490d      	ldr	r1, [pc, #52]	; (800187c <HAL_UART_Init+0xa4>)
 8001846:	400a      	ands	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2108      	movs	r1, #8
 8001856:	438a      	bics	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f000 fd81 	bl	8002374 <UART_CheckIdleState>
 8001872:	0003      	movs	r3, r0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	fffff7ff 	.word	0xfffff7ff

08001880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001894:	2b20      	cmp	r3, #32
 8001896:	d000      	beq.n	800189a <HAL_UART_Transmit+0x1a>
 8001898:	e096      	b.n	80019c8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_UART_Transmit+0x28>
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e08e      	b.n	80019ca <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d109      	bne.n	80018cc <HAL_UART_Transmit+0x4c>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2201      	movs	r2, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d001      	beq.n	80018cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e07e      	b.n	80019ca <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2274      	movs	r2, #116	; 0x74
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_UART_Transmit+0x5a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e077      	b.n	80019ca <HAL_UART_Transmit+0x14a>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2274      	movs	r2, #116	; 0x74
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	2100      	movs	r1, #0
 80018e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2221      	movs	r2, #33	; 0x21
 80018ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018f0:	f7fe feee 	bl	80006d0 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1dba      	adds	r2, r7, #6
 80018fc:	2150      	movs	r1, #80	; 0x50
 80018fe:	8812      	ldrh	r2, [r2, #0]
 8001900:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1dba      	adds	r2, r7, #6
 8001906:	2152      	movs	r1, #82	; 0x52
 8001908:	8812      	ldrh	r2, [r2, #0]
 800190a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	429a      	cmp	r2, r3
 8001916:	d108      	bne.n	800192a <HAL_UART_Transmit+0xaa>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d104      	bne.n	800192a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e003      	b.n	8001932 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2274      	movs	r2, #116	; 0x74
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800193a:	e02d      	b.n	8001998 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	0013      	movs	r3, r2
 8001946:	2200      	movs	r2, #0
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	f000 fd5b 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e039      	b.n	80019ca <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	881a      	ldrh	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	05d2      	lsls	r2, r2, #23
 8001966:	0dd2      	lsrs	r2, r2, #23
 8001968:	b292      	uxth	r2, r2
 800196a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	3302      	adds	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	e008      	b.n	8001986 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b292      	uxth	r2, r2
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	3301      	adds	r3, #1
 8001984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2252      	movs	r2, #82	; 0x52
 800198a:	5a9b      	ldrh	r3, [r3, r2]
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b299      	uxth	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2252      	movs	r2, #82	; 0x52
 8001996:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2252      	movs	r2, #82	; 0x52
 800199c:	5a9b      	ldrh	r3, [r3, r2]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1cb      	bne.n	800193c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	0013      	movs	r3, r2
 80019ae:	2200      	movs	r2, #0
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	f000 fd27 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e005      	b.n	80019ca <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b008      	add	sp, #32
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b0ab      	sub	sp, #172	; 0xac
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	22a4      	movs	r2, #164	; 0xa4
 80019e4:	18b9      	adds	r1, r7, r2
 80019e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	20a0      	movs	r0, #160	; 0xa0
 80019f0:	1839      	adds	r1, r7, r0
 80019f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	219c      	movs	r1, #156	; 0x9c
 80019fc:	1879      	adds	r1, r7, r1
 80019fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a00:	0011      	movs	r1, r2
 8001a02:	18bb      	adds	r3, r7, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a99      	ldr	r2, [pc, #612]	; (8001c6c <HAL_UART_IRQHandler+0x298>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2298      	movs	r2, #152	; 0x98
 8001a0c:	18bc      	adds	r4, r7, r2
 8001a0e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001a10:	18bb      	adds	r3, r7, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d114      	bne.n	8001a42 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d00f      	beq.n	8001a42 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2220      	movs	r2, #32
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d00a      	beq.n	8001a42 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d100      	bne.n	8001a36 <HAL_UART_IRQHandler+0x62>
 8001a34:	e27e      	b.n	8001f34 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	4798      	blx	r3
      }
      return;
 8001a40:	e278      	b.n	8001f34 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001a42:	2398      	movs	r3, #152	; 0x98
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d100      	bne.n	8001a4e <HAL_UART_IRQHandler+0x7a>
 8001a4c:	e114      	b.n	8001c78 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001a4e:	239c      	movs	r3, #156	; 0x9c
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	4013      	ands	r3, r2
 8001a58:	d106      	bne.n	8001a68 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001a5a:	23a0      	movs	r3, #160	; 0xa0
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a83      	ldr	r2, [pc, #524]	; (8001c70 <HAL_UART_IRQHandler+0x29c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	d100      	bne.n	8001a68 <HAL_UART_IRQHandler+0x94>
 8001a66:	e107      	b.n	8001c78 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a68:	23a4      	movs	r3, #164	; 0xa4
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d012      	beq.n	8001a9a <HAL_UART_IRQHandler+0xc6>
 8001a74:	23a0      	movs	r3, #160	; 0xa0
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d00b      	beq.n	8001a9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	589b      	ldr	r3, [r3, r2]
 8001a90:	2201      	movs	r2, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a9a:	23a4      	movs	r3, #164	; 0xa4
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d011      	beq.n	8001aca <HAL_UART_IRQHandler+0xf6>
 8001aa6:	239c      	movs	r3, #156	; 0x9c
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d00b      	beq.n	8001aca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	589b      	ldr	r3, [r3, r2]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001aca:	23a4      	movs	r3, #164	; 0xa4
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d011      	beq.n	8001afa <HAL_UART_IRQHandler+0x126>
 8001ad6:	239c      	movs	r3, #156	; 0x9c
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d00b      	beq.n	8001afa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	589b      	ldr	r3, [r3, r2]
 8001af0:	2202      	movs	r2, #2
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001afa:	23a4      	movs	r3, #164	; 0xa4
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2208      	movs	r2, #8
 8001b02:	4013      	ands	r3, r2
 8001b04:	d017      	beq.n	8001b36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b06:	23a0      	movs	r3, #160	; 0xa0
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d105      	bne.n	8001b1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001b12:	239c      	movs	r3, #156	; 0x9c
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b1c:	d00b      	beq.n	8001b36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2208      	movs	r2, #8
 8001b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	589b      	ldr	r3, [r3, r2]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b36:	23a4      	movs	r3, #164	; 0xa4
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4013      	ands	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_UART_IRQHandler+0x198>
 8001b44:	23a0      	movs	r3, #160	; 0xa0
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	04db      	lsls	r3, r3, #19
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d00c      	beq.n	8001b6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	589b      	ldr	r3, [r3, r2]
 8001b62:	2220      	movs	r2, #32
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	589b      	ldr	r3, [r3, r2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d100      	bne.n	8001b78 <HAL_UART_IRQHandler+0x1a4>
 8001b76:	e1df      	b.n	8001f38 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b78:	23a4      	movs	r3, #164	; 0xa4
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	4013      	ands	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b84:	23a0      	movs	r3, #160	; 0xa0
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d008      	beq.n	8001ba2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	0010      	movs	r0, r2
 8001ba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	589b      	ldr	r3, [r3, r2]
 8001ba8:	2194      	movs	r1, #148	; 0x94
 8001baa:	187a      	adds	r2, r7, r1
 8001bac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2240      	movs	r2, #64	; 0x40
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d004      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2228      	movs	r2, #40	; 0x28
 8001bc2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bc4:	d047      	beq.n	8001c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 fcdf 	bl	800258c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d137      	bne.n	8001c4c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8001be0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001be4:	2090      	movs	r0, #144	; 0x90
 8001be6:	183a      	adds	r2, r7, r0
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	2301      	movs	r3, #1
 8001bec:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bf0:	f383 8810 	msr	PRIMASK, r3
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2140      	movs	r1, #64	; 0x40
 8001c02:	438a      	bics	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0e:	f383 8810 	msr	PRIMASK, r3
}
 8001c12:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_UART_IRQHandler+0x2a0>)
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7fe fe95 	bl	8000958 <HAL_DMA_Abort_IT>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d01a      	beq.n	8001c68 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c40:	e012      	b.n	8001c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f98d 	bl	8001f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c4a:	e00d      	b.n	8001c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f988 	bl	8001f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c54:	e008      	b.n	8001c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f983 	bl	8001f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	2100      	movs	r1, #0
 8001c64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001c66:	e167      	b.n	8001f38 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c68:	46c0      	nop			; (mov r8, r8)
    return;
 8001c6a:	e165      	b.n	8001f38 <HAL_UART_IRQHandler+0x564>
 8001c6c:	0000080f 	.word	0x0000080f
 8001c70:	04000120 	.word	0x04000120
 8001c74:	08002651 	.word	0x08002651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d000      	beq.n	8001c82 <HAL_UART_IRQHandler+0x2ae>
 8001c80:	e131      	b.n	8001ee6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001c82:	23a4      	movs	r3, #164	; 0xa4
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d100      	bne.n	8001c90 <HAL_UART_IRQHandler+0x2bc>
 8001c8e:	e12a      	b.n	8001ee6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001c90:	23a0      	movs	r3, #160	; 0xa0
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_UART_IRQHandler+0x2ca>
 8001c9c:	e123      	b.n	8001ee6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d000      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x2e2>
 8001cb4:	e09b      	b.n	8001dee <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	217e      	movs	r1, #126	; 0x7e
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <HAL_UART_IRQHandler+0x2fa>
 8001ccc:	e136      	b.n	8001f3c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2258      	movs	r2, #88	; 0x58
 8001cd2:	5a9b      	ldrh	r3, [r3, r2]
 8001cd4:	187a      	adds	r2, r7, r1
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d300      	bcc.n	8001cde <HAL_UART_IRQHandler+0x30a>
 8001cdc:	e12e      	b.n	8001f3c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	187a      	adds	r2, r7, r1
 8001ce2:	215a      	movs	r1, #90	; 0x5a
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d06e      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	f383 8810 	msr	PRIMASK, r3
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	498e      	ldr	r1, [pc, #568]	; (8001f4c <HAL_UART_IRQHandler+0x578>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	f383 8810 	msr	PRIMASK, r3
}
 8001d22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d24:	f3ef 8310 	mrs	r3, PRIMASK
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d2e:	2301      	movs	r3, #1
 8001d30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d34:	f383 8810 	msr	PRIMASK, r3
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	438a      	bics	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d50:	f383 8810 	msr	PRIMASK, r3
}
 8001d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d56:	f3ef 8310 	mrs	r3, PRIMASK
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d60:	2301      	movs	r3, #1
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d66:	f383 8810 	msr	PRIMASK, r3
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	438a      	bics	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d82:	f383 8810 	msr	PRIMASK, r3
}
 8001d86:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d94:	f3ef 8310 	mrs	r3, PRIMASK
 8001d98:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d9e:	2301      	movs	r3, #1
 8001da0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001da4:	f383 8810 	msr	PRIMASK, r3
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2110      	movs	r1, #16
 8001db6:	438a      	bics	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc0:	f383 8810 	msr	PRIMASK, r3
}
 8001dc4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7fe fd8c 	bl	80008e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2258      	movs	r2, #88	; 0x58
 8001dd4:	5a9a      	ldrh	r2, [r3, r2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	215a      	movs	r1, #90	; 0x5a
 8001dda:	5a5b      	ldrh	r3, [r3, r1]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0011      	movs	r1, r2
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 f8c4 	bl	8001f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001dec:	e0a6      	b.n	8001f3c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2258      	movs	r2, #88	; 0x58
 8001df2:	5a99      	ldrh	r1, [r3, r2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	225a      	movs	r2, #90	; 0x5a
 8001df8:	5a9b      	ldrh	r3, [r3, r2]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	208e      	movs	r0, #142	; 0x8e
 8001dfe:	183b      	adds	r3, r7, r0
 8001e00:	1a8a      	subs	r2, r1, r2
 8001e02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	225a      	movs	r2, #90	; 0x5a
 8001e08:	5a9b      	ldrh	r3, [r3, r2]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d100      	bne.n	8001e12 <HAL_UART_IRQHandler+0x43e>
 8001e10:	e096      	b.n	8001f40 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <HAL_UART_IRQHandler+0x448>
 8001e1a:	e091      	b.n	8001f40 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e24:	2488      	movs	r4, #136	; 0x88
 8001e26:	193a      	adds	r2, r7, r4
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f383 8810 	msr	PRIMASK, r3
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4943      	ldr	r1, [pc, #268]	; (8001f50 <HAL_UART_IRQHandler+0x57c>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f383 8810 	msr	PRIMASK, r3
}
 8001e52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e54:	f3ef 8310 	mrs	r3, PRIMASK
 8001e58:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5c:	2484      	movs	r4, #132	; 0x84
 8001e5e:	193a      	adds	r2, r7, r4
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f383 8810 	msr	PRIMASK, r3
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	438a      	bics	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f383 8810 	msr	PRIMASK, r3
}
 8001e8a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	193a      	adds	r2, r7, r4
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	2301      	movs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	f383 8810 	msr	PRIMASK, r3
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	f383 8810 	msr	PRIMASK, r3
}
 8001ed4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	881a      	ldrh	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0011      	movs	r1, r2
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 f848 	bl	8001f74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001ee4:	e02c      	b.n	8001f40 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ee6:	23a4      	movs	r3, #164	; 0xa4
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001ef2:	23a0      	movs	r3, #160	; 0xa0
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	4013      	ands	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01e      	beq.n	8001f44 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	0010      	movs	r0, r2
 8001f0e:	4798      	blx	r3
    }
    return;
 8001f10:	e018      	b.n	8001f44 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f12:	23a4      	movs	r3, #164	; 0xa4
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_UART_IRQHandler+0x572>
 8001f1e:	23a0      	movs	r3, #160	; 0xa0
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fba6 	bl	800267e <UART_EndTransmit_IT>
    return;
 8001f32:	e008      	b.n	8001f46 <HAL_UART_IRQHandler+0x572>
      return;
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	e006      	b.n	8001f46 <HAL_UART_IRQHandler+0x572>
    return;
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	e004      	b.n	8001f46 <HAL_UART_IRQHandler+0x572>
      return;
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	e002      	b.n	8001f46 <HAL_UART_IRQHandler+0x572>
      return;
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	e000      	b.n	8001f46 <HAL_UART_IRQHandler+0x572>
    return;
 8001f44:	46c0      	nop			; (mov r8, r8)
  }

}
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b02b      	add	sp, #172	; 0xac
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	fffffeff 	.word	0xfffffeff
 8001f50:	fffffedf 	.word	0xfffffedf

08001f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	1cbb      	adds	r3, r7, #2
 8001f80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f94:	231e      	movs	r3, #30
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8d      	ldr	r2, [pc, #564]	; (80021f0 <UART_SetConfig+0x264>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a88      	ldr	r2, [pc, #544]	; (80021f4 <UART_SetConfig+0x268>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a7f      	ldr	r2, [pc, #508]	; (80021f8 <UART_SetConfig+0x26c>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a7b      	ldr	r2, [pc, #492]	; (80021fc <UART_SetConfig+0x270>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d127      	bne.n	8002062 <UART_SetConfig+0xd6>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <UART_SetConfig+0x274>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	2203      	movs	r2, #3
 8002018:	4013      	ands	r3, r2
 800201a:	2b03      	cmp	r3, #3
 800201c:	d00d      	beq.n	800203a <UART_SetConfig+0xae>
 800201e:	d81b      	bhi.n	8002058 <UART_SetConfig+0xcc>
 8002020:	2b02      	cmp	r3, #2
 8002022:	d014      	beq.n	800204e <UART_SetConfig+0xc2>
 8002024:	d818      	bhi.n	8002058 <UART_SetConfig+0xcc>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <UART_SetConfig+0xa4>
 800202a:	2b01      	cmp	r3, #1
 800202c:	d00a      	beq.n	8002044 <UART_SetConfig+0xb8>
 800202e:	e013      	b.n	8002058 <UART_SetConfig+0xcc>
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	e021      	b.n	800207e <UART_SetConfig+0xf2>
 800203a:	231f      	movs	r3, #31
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2202      	movs	r2, #2
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e01c      	b.n	800207e <UART_SetConfig+0xf2>
 8002044:	231f      	movs	r3, #31
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2204      	movs	r2, #4
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e017      	b.n	800207e <UART_SetConfig+0xf2>
 800204e:	231f      	movs	r3, #31
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2208      	movs	r2, #8
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e012      	b.n	800207e <UART_SetConfig+0xf2>
 8002058:	231f      	movs	r3, #31
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2210      	movs	r2, #16
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e00d      	b.n	800207e <UART_SetConfig+0xf2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a67      	ldr	r2, [pc, #412]	; (8002204 <UART_SetConfig+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d104      	bne.n	8002076 <UART_SetConfig+0xea>
 800206c:	231f      	movs	r3, #31
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e003      	b.n	800207e <UART_SetConfig+0xf2>
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2210      	movs	r2, #16
 800207c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	429a      	cmp	r2, r3
 8002088:	d15d      	bne.n	8002146 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800208a:	231f      	movs	r3, #31
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d015      	beq.n	80020c0 <UART_SetConfig+0x134>
 8002094:	dc18      	bgt.n	80020c8 <UART_SetConfig+0x13c>
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00d      	beq.n	80020b6 <UART_SetConfig+0x12a>
 800209a:	dc15      	bgt.n	80020c8 <UART_SetConfig+0x13c>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <UART_SetConfig+0x11a>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d005      	beq.n	80020b0 <UART_SetConfig+0x124>
 80020a4:	e010      	b.n	80020c8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020a6:	f7ff faa3 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        break;
 80020ae:	e012      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020b0:	4b55      	ldr	r3, [pc, #340]	; (8002208 <UART_SetConfig+0x27c>)
 80020b2:	61bb      	str	r3, [r7, #24]
        break;
 80020b4:	e00f      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020b6:	f7ff fa2b 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 80020ba:	0003      	movs	r3, r0
 80020bc:	61bb      	str	r3, [r7, #24]
        break;
 80020be:	e00a      	b.n	80020d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	61bb      	str	r3, [r7, #24]
        break;
 80020c6:	e006      	b.n	80020d6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020cc:	231e      	movs	r3, #30
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
        break;
 80020d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d100      	bne.n	80020de <UART_SetConfig+0x152>
 80020dc:	e07b      	b.n	80021d6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	18d2      	adds	r2, r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0019      	movs	r1, r3
 80020f0:	0010      	movs	r0, r2
 80020f2:	f7fe f809 	bl	8000108 <__udivsi3>
 80020f6:	0003      	movs	r3, r0
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d91c      	bls.n	800213c <UART_SetConfig+0x1b0>
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	429a      	cmp	r2, r3
 800210a:	d217      	bcs.n	800213c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	b29a      	uxth	r2, r3
 8002110:	200e      	movs	r0, #14
 8002112:	183b      	adds	r3, r7, r0
 8002114:	210f      	movs	r1, #15
 8002116:	438a      	bics	r2, r1
 8002118:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	2207      	movs	r2, #7
 8002122:	4013      	ands	r3, r2
 8002124:	b299      	uxth	r1, r3
 8002126:	183b      	adds	r3, r7, r0
 8002128:	183a      	adds	r2, r7, r0
 800212a:	8812      	ldrh	r2, [r2, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	183a      	adds	r2, r7, r0
 8002136:	8812      	ldrh	r2, [r2, #0]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e04c      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800213c:	231e      	movs	r3, #30
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e047      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002146:	231f      	movs	r3, #31
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d015      	beq.n	800217c <UART_SetConfig+0x1f0>
 8002150:	dc18      	bgt.n	8002184 <UART_SetConfig+0x1f8>
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00d      	beq.n	8002172 <UART_SetConfig+0x1e6>
 8002156:	dc15      	bgt.n	8002184 <UART_SetConfig+0x1f8>
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <UART_SetConfig+0x1d6>
 800215c:	2b02      	cmp	r3, #2
 800215e:	d005      	beq.n	800216c <UART_SetConfig+0x1e0>
 8002160:	e010      	b.n	8002184 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002162:	f7ff fa45 	bl	80015f0 <HAL_RCC_GetPCLK1Freq>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
        break;
 800216a:	e012      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <UART_SetConfig+0x27c>)
 800216e:	61bb      	str	r3, [r7, #24]
        break;
 8002170:	e00f      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002172:	f7ff f9cd 	bl	8001510 <HAL_RCC_GetSysClockFreq>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]
        break;
 800217a:	e00a      	b.n	8002192 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	61bb      	str	r3, [r7, #24]
        break;
 8002182:	e006      	b.n	8002192 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002188:	231e      	movs	r3, #30
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
        break;
 8002190:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01e      	beq.n	80021d6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	085a      	lsrs	r2, r3, #1
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	18d2      	adds	r2, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f7fd ffad 	bl	8000108 <__udivsi3>
 80021ae:	0003      	movs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	d909      	bls.n	80021ce <UART_SetConfig+0x242>
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d204      	bcs.n	80021ce <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	e003      	b.n	80021d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80021ce:	231e      	movs	r3, #30
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80021e2:	231e      	movs	r3, #30
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b008      	add	sp, #32
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	efff69f3 	.word	0xefff69f3
 80021f4:	ffffcfff 	.word	0xffffcfff
 80021f8:	fffff4ff 	.word	0xfffff4ff
 80021fc:	40013800 	.word	0x40013800
 8002200:	40021000 	.word	0x40021000
 8002204:	40004400 	.word	0x40004400
 8002208:	007a1200 	.word	0x007a1200

0800220c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d00b      	beq.n	8002236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <UART_AdvFeatureConfig+0x144>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d00b      	beq.n	8002258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a43      	ldr	r2, [pc, #268]	; (8002354 <UART_AdvFeatureConfig+0x148>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d00b      	beq.n	800227a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <UART_AdvFeatureConfig+0x14c>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	2208      	movs	r2, #8
 8002280:	4013      	ands	r3, r2
 8002282:	d00b      	beq.n	800229c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <UART_AdvFeatureConfig+0x150>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d00b      	beq.n	80022be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <UART_AdvFeatureConfig+0x154>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2220      	movs	r2, #32
 80022c4:	4013      	ands	r3, r2
 80022c6:	d00b      	beq.n	80022e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4a25      	ldr	r2, [pc, #148]	; (8002364 <UART_AdvFeatureConfig+0x158>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	4013      	ands	r3, r2
 80022e8:	d01d      	beq.n	8002326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <UART_AdvFeatureConfig+0x15c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	035b      	lsls	r3, r3, #13
 800230a:	429a      	cmp	r2, r3
 800230c:	d10b      	bne.n	8002326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <UART_AdvFeatureConfig+0x160>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	4013      	ands	r3, r2
 800232e:	d00b      	beq.n	8002348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <UART_AdvFeatureConfig+0x164>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
  }
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fffdffff 	.word	0xfffdffff
 8002354:	fffeffff 	.word	0xfffeffff
 8002358:	fffbffff 	.word	0xfffbffff
 800235c:	ffff7fff 	.word	0xffff7fff
 8002360:	ffffefff 	.word	0xffffefff
 8002364:	ffffdfff 	.word	0xffffdfff
 8002368:	ffefffff 	.word	0xffefffff
 800236c:	ff9fffff 	.word	0xff9fffff
 8002370:	fff7ffff 	.word	0xfff7ffff

08002374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	2100      	movs	r1, #0
 8002382:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002384:	f7fe f9a4 	bl	80006d0 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	2b08      	cmp	r3, #8
 8002398:	d10c      	bne.n	80023b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0391      	lsls	r1, r2, #14
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <UART_CheckIdleState+0x8c>)
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f000 f82c 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d001      	beq.n	80023b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e021      	b.n	80023f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d10c      	bne.n	80023dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	03d1      	lsls	r1, r2, #15
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <UART_CheckIdleState+0x8c>)
 80023cc:	9200      	str	r2, [sp, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f000 f818 	bl	8002404 <UART_WaitOnFlagUntilTimeout>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e00d      	b.n	80023f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2274      	movs	r2, #116	; 0x74
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	01ffffff 	.word	0x01ffffff

08002404 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b094      	sub	sp, #80	; 0x50
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002414:	e0a3      	b.n	800255e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002418:	3301      	adds	r3, #1
 800241a:	d100      	bne.n	800241e <UART_WaitOnFlagUntilTimeout+0x1a>
 800241c:	e09f      	b.n	800255e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241e:	f7fe f957 	bl	80006d0 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800242a:	429a      	cmp	r2, r3
 800242c:	d302      	bcc.n	8002434 <UART_WaitOnFlagUntilTimeout+0x30>
 800242e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002430:	2b00      	cmp	r3, #0
 8002432:	d13d      	bne.n	80024b0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002434:	f3ef 8310 	mrs	r3, PRIMASK
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
 800243e:	2301      	movs	r3, #1
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	f383 8810 	msr	PRIMASK, r3
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	494c      	ldr	r1, [pc, #304]	; (8002588 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002456:	400a      	ands	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	f383 8810 	msr	PRIMASK, r3
}
 8002464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002466:	f3ef 8310 	mrs	r3, PRIMASK
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
 8002470:	2301      	movs	r3, #1
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	f383 8810 	msr	PRIMASK, r3
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	f383 8810 	msr	PRIMASK, r3
}
 8002496:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2274      	movs	r2, #116	; 0x74
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e067      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d050      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	401a      	ands	r2, r3
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d146      	bne.n	800255e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024da:	f3ef 8310 	mrs	r3, PRIMASK
 80024de:	613b      	str	r3, [r7, #16]
  return(result);
 80024e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f383 8810 	msr	PRIMASK, r3
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4923      	ldr	r1, [pc, #140]	; (8002588 <UART_WaitOnFlagUntilTimeout+0x184>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f383 8810 	msr	PRIMASK, r3
}
 800250a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250c:	f3ef 8310 	mrs	r3, PRIMASK
 8002510:	61fb      	str	r3, [r7, #28]
  return(result);
 8002512:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
 8002516:	2301      	movs	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f383 8810 	msr	PRIMASK, r3
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	438a      	bics	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f383 8810 	msr	PRIMASK, r3
}
 800253c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	2120      	movs	r1, #32
 8002550:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2274      	movs	r2, #116	; 0x74
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e010      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4013      	ands	r3, r2
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	425a      	negs	r2, r3
 800256e:	4153      	adcs	r3, r2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	001a      	movs	r2, r3
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d100      	bne.n	800257e <UART_WaitOnFlagUntilTimeout+0x17a>
 800257c:	e74b      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b014      	add	sp, #80	; 0x50
 8002586:	bd80      	pop	{r7, pc}
 8002588:	fffffe5f 	.word	0xfffffe5f

0800258c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002594:	f3ef 8310 	mrs	r3, PRIMASK
 8002598:	617b      	str	r3, [r7, #20]
  return(result);
 800259a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f383 8810 	msr	PRIMASK, r3
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4925      	ldr	r1, [pc, #148]	; (800264c <UART_EndRxTransfer+0xc0>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ca:	623b      	str	r3, [r7, #32]
  return(result);
 80025cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f383 8810 	msr	PRIMASK, r3
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	438a      	bics	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	f383 8810 	msr	PRIMASK, r3
}
 80025f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d118      	bne.n	8002632 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002600:	f3ef 8310 	mrs	r3, PRIMASK
 8002604:	60bb      	str	r3, [r7, #8]
  return(result);
 8002606:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260a:	2301      	movs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2110      	movs	r1, #16
 8002622:	438a      	bics	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b00e      	add	sp, #56	; 0x38
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fffffedf 	.word	0xfffffedf

08002650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	225a      	movs	r2, #90	; 0x5a
 8002662:	2100      	movs	r1, #0
 8002664:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2252      	movs	r2, #82	; 0x52
 800266a:	2100      	movs	r1, #0
 800266c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff fc77 	bl	8001f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}

0800267e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002686:	f3ef 8310 	mrs	r3, PRIMASK
 800268a:	60bb      	str	r3, [r7, #8]
  return(result);
 800268c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	2301      	movs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f383 8810 	msr	PRIMASK, r3
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2140      	movs	r1, #64	; 0x40
 80026a8:	438a      	bics	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f383 8810 	msr	PRIMASK, r3
}
 80026b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff fc44 	bl	8001f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b006      	add	sp, #24
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	2600      	movs	r6, #0
 80026d8:	4d0c      	ldr	r5, [pc, #48]	; (800270c <__libc_init_array+0x38>)
 80026da:	4c0d      	ldr	r4, [pc, #52]	; (8002710 <__libc_init_array+0x3c>)
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	42a6      	cmp	r6, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	2600      	movs	r6, #0
 80026e6:	f000 f821 	bl	800272c <_init>
 80026ea:	4d0a      	ldr	r5, [pc, #40]	; (8002714 <__libc_init_array+0x40>)
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <__libc_init_array+0x44>)
 80026ee:	1b64      	subs	r4, r4, r5
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	00b3      	lsls	r3, r6, #2
 80026fa:	58eb      	ldr	r3, [r5, r3]
 80026fc:	4798      	blx	r3
 80026fe:	3601      	adds	r6, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	00b3      	lsls	r3, r6, #2
 8002704:	58eb      	ldr	r3, [r5, r3]
 8002706:	4798      	blx	r3
 8002708:	3601      	adds	r6, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	0800277c 	.word	0x0800277c
 8002710:	0800277c 	.word	0x0800277c
 8002714:	0800277c 	.word	0x0800277c
 8002718:	08002780 	.word	0x08002780

0800271c <memset>:
 800271c:	0003      	movs	r3, r0
 800271e:	1882      	adds	r2, r0, r2
 8002720:	4293      	cmp	r3, r2
 8002722:	d100      	bne.n	8002726 <memset+0xa>
 8002724:	4770      	bx	lr
 8002726:	7019      	strb	r1, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	e7f9      	b.n	8002720 <memset+0x4>

0800272c <_init>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002732:	bc08      	pop	{r3}
 8002734:	469e      	mov	lr, r3
 8002736:	4770      	bx	lr

08002738 <_fini>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273e:	bc08      	pop	{r3}
 8002740:	469e      	mov	lr, r3
 8002742:	4770      	bx	lr
